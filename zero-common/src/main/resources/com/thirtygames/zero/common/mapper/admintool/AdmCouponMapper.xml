<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.thirtygames.zero.common.mapper.admintool.AdmCouponMapper">


	<insert id="save" parameterType="com.thirtygames.zero.common.model.admintool.AdminCoupon">
		insert into Coupon (couponId, couponType, allowDuplicate, bundleCode, rewardType1, reward1, rewardType2, reward2, rewardType3, reward3, rewardType4, reward4, rewardType5, reward5, expireYmd, accountId, useYmdt)
		values (#{couponId}, #{couponType}, #{allowDuplicate}, #{bundleCode}, #{rewardType1}, #{reward1}, #{rewardType2}, #{reward2}, #{rewardType3}, #{reward3}, #{rewardType4}, #{reward4}, #{rewardType5}, #{reward5}, #{expireYmd}, null, null)
		on duplicate key update
			couponId = #{couponId},
			couponType = #{couponType},
			allowDuplicate = #{allowDuplicate},
			bundleCode = #{bundleCode},
			rewardType1 = #{rewardType1},
			reward1 = #{reward1},
			rewardType2 = #{rewardType2},
			reward2 = #{reward2},
			rewardType3 = #{rewardType3},
			reward3 = #{reward3},
			rewardType4 = #{rewardType4},
			reward4 = #{reward4},
			rewardType5 = #{rewardType5},
			reward5 = #{reward5},
			expireYmd = #{expireYmd},
			accountId = null,
			useYmdt = null
    </insert>

	<delete id="delete" parameterType="com.thirtygames.zero.common.model.admintool.AdminCoupon">
		delete from Coupon
		where couponKey = #{id}
    </delete>

    
    <update id="update" parameterType="com.thirtygames.zero.common.model.admintool.AdminCoupon">
		update Coupon
		<trim prefix="SET" suffixOverrides=",">
			couponKey = couponKey,
        	<if test="couponId != null">couponId = #{couponId},</if>  
        	<if test="couponType != null">couponType = #{couponType},</if>  
        	<if test="allowDuplicate != null">allowDuplicate = #{allowDuplicate},</if>  
        	<if test="bundleCode != null">bundleCode = #{bundleCode},</if>  
        	<if test="rewardType1 != null">rewardType1 = #{rewardType1},</if>  
        	<if test="reward1 != null">reward1 = #{reward1},</if>
        	<if test="rewardType2 != null">rewardType2 = #{rewardType2},</if>  
        	<if test="reward2 != null">reward2 = #{reward2},</if>
        	<if test="rewardType3 != null">rewardType3 = #{rewardType3},</if>  
        	<if test="reward3 != null">reward3 = #{reward3},</if>
        	<if test="rewardType4 != null">rewardType4 = #{rewardType4},</if>  
        	<if test="reward4 != null">reward4 = #{reward4},</if>
        	<if test="rewardType5 != null">rewardType5 = #{rewardType5},</if>  
        	<if test="reward5 != null">reward5 = #{reward5},</if>
        	<if test="rewardDone != null">rewardDone = #{rewardDone},</if>  
        	<if test="expireYmd != null">expireYmd = #{expireYmd},</if>  
		</trim>
		where couponKey = #{couponKey}
	</update>
	
	<select id="search" resultType="com.thirtygames.zero.common.model.admintool.AdminCoupon" parameterType="map">
    	select
       		couponKey, couponId, couponType, allowDuplicate, bundleCode,
       		rewardType1, reward1, rewardType2, reward2, rewardType3, reward3, rewardType4, reward4, 
       		rewardType5, reward5, rewardDone, expireYmd, accountId, date_format(genYmdt, '%Y-%m-%d %H:%i:%s') as genYmdt, date_format(useYmdt, '%Y-%m-%d %H:%i:%s') as useYmdt
        from Coupon 
        <where>
        	1 = 1
	        <if test="model.rules != null">			
				<foreach collection="model.rules" item="rule" index="index" separator="" open="" close="">
		           	and ${rule.field}
		           	<choose>
		           		<when test="rule.op == 'eq'"> = </when>
		           		<when test="rule.op == 'le'"> &lt;= </when>
		           		<when test="rule.op == 'ge'"> &gt;= </when>
		           	</choose> 
		           	#{rule.data}
		       	</foreach>
	       	</if>
			order by couponKey desc
	        <if test="length &gt; 0">limit #{from}, #{length}</if>	
        </where>
    </select>
    
    <select id="excel" resultType="com.thirtygames.zero.common.model.admintool.AdminCoupon" parameterType="map">
    	select
       		couponKey, couponId, couponType, allowDuplicate, bundleCode,
       		rewardType1, reward1, rewardType2, reward2, rewardType3, reward3, rewardType4, reward4, 
       		rewardType5, reward5, rewardDone, expireYmd, accountId, date_format(genYmdt, '%Y-%m-%d %H:%i:%s') as genYmdt, date_format(useYmdt, '%Y-%m-%d %H:%i:%s') as useYmdt
        from Coupon 
        <where>
        	1 = 1
	        <if test="model.rules != null">			
				<foreach collection="model.rules" item="rule" index="index" separator="" open="" close="">
		           	and ${rule.field}
		           	<choose>
		           		<when test="rule.op == 'eq'"> = </when>
		           		<when test="rule.op == 'le'"> &lt;= </when>
		           		<when test="rule.op == 'ge'"> &gt;= </when>
		           	</choose> 
		           	#{rule.data}
		       	</foreach>
	       	</if>
	       	order by couponKey desc
        </where>
    </select>
    
    <select id="range" parameterType="int" resultType="com.thirtygames.zero.common.model.admintool.AdminCoupon">
        select 
       		couponKey, couponId, couponType, allowDuplicate, bundleCode,
       		rewardType1, reward1, rewardType2, reward2, rewardType3, reward3, rewardType4, reward4, 
       		rewardType5, reward5, rewardDone, expireYmd, accountId, date_format(genYmdt, '%Y-%m-%d %H:%i:%s') as genYmdt, date_format(useYmdt, '%Y-%m-%d %H:%i:%s') as useYmdt
        from Coupon 
        order by couponKey desc
        limit #{from}, #{length}
    </select>
    
    <select id="size" resultType="int" parameterType="com.thirtygames.zero.common.model.admintool.AdminCoupon">
        select count(*)
        from Coupon
        <where>
        	1 = 1
	        <if test="model.rules != null">			
				<foreach collection="model.rules" item="rule" index="index" separator="" open="" close="">
		           	and ${rule.field}
		           	<choose>
		           		<when test="rule.op == 'eq'"> = </when>
		           		<when test="rule.op == 'le'"> &lt;= </when>
		           		<when test="rule.op == 'ge'"> &gt;= </when>
		           	</choose> 
		           	#{rule.data}
		       	</foreach>
	       	</if>
        </where>
    </select>
</mapper>