<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.thirtygames.zero.common.mapper.admintool.AdmClientInfoMapper">
	<insert id="save" parameterType="com.thirtygames.zero.common.model.meta.ClientInfo">
		insert into ClientInfo (clientVersion, clientPlatform, clientHash, isValid)
		values (#{clientVersion}, #{clientPlatform}, #{clientHash}, #{isValid})
		on duplicate key update
			clientVersion = #{clientVersion},
			clientPlatform = #{clientPlatform},
			clientHash = #{clientHash},
			isValid = #{isValid}
    </insert>

	<delete id="delete" parameterType="com.thirtygames.zero.common.model.meta.ClientInfo">
		delete from ClientInfo
		where clientKey = #{id}
    </delete>

    
    <update id="update" parameterType="com.thirtygames.zero.common.model.meta.ClientInfo">
		update ClientInfo
		<trim prefix="SET" suffixOverrides=",">
			modYmdt = now(),
        	<if test="clientVersion != null">clientVersion = #{clientVersion},</if>  
        	<if test="clientPlatform != null">clientPlatform = #{clientPlatform},</if>
        	<if test="clientHash != null">clientHash = #{clientHash},</if>  
        	<if test="isValid != null">isValid = #{isValid},</if>  
		</trim>
		where clientKey = #{clientKey}
	</update>
	
	<select id="search" resultType="com.thirtygames.zero.common.model.meta.ClientInfo" parameterType="map">
    	select
       		clientKey, clientVersion, clientPlatform, clientHash, isValid, date_format(modYmdt, '%Y-%m-%d %H:%i:%s') as modYmdt, modId
        from ClientInfo 
        <where>
        	1 = 1
	        <if test="model.rules != null">			
				<foreach collection="model.rules" item="rule" index="index" separator="" open="" close="">
		           	and ${rule.field}
		           	<choose>
		           		<when test="rule.op == 'eq'"> = </when>
		           		<when test="rule.op == 'le'"> &lt;= </when>
		           		<when test="rule.op == 'ge'"> &gt;= </when>
		           	</choose> 
		           	#{rule.data}
		       	</foreach>
	       	</if>
	       	
	       	<choose>
				<when test="sidx != '' and sord != ''">
					<choose>
						<when test="sidx=='clientKey'">order by clientKey ${sord}</when>
						<when test="sidx=='clientPlatform'">order by clientPlatform ${sord}</when>
						<when test="sidx=='clientVersion'">order by clientVersion ${sord}</when>
						<when test="sidx=='isValid'">order by isValid ${sord}</when>
						<otherwise>order by ${sidx} ${sord}</otherwise>
					</choose>
				</when>
			</choose>
			
	        <if test="length &gt; 0">limit #{from}, #{length}</if>	
        </where>
    </select>
    
    <select id="excel" resultType="com.thirtygames.zero.common.model.meta.ClientInfo" parameterType="map">
    	select
       		clientKey, clientVersion, clientPlatform, clientHash, isValid, date_format(modYmdt, '%Y-%m-%d %H:%i:%s') as modYmdt, modId
        from ClientInfo 
        <where>
        	1 = 1
	        <if test="model.rules != null">			
				<foreach collection="model.rules" item="rule" index="index" separator="" open="" close="">
		           	and ${rule.field}
		           	<choose>
		           		<when test="rule.op == 'eq'"> = </when>
		           		<when test="rule.op == 'le'"> &lt;= </when>
		           		<when test="rule.op == 'ge'"> &gt;= </when>
		           	</choose> 
		           	#{rule.data}
		       	</foreach>
	       	</if>
        </where>
    </select>
    
    <select id="range" parameterType="int" resultType="com.thirtygames.zero.common.model.meta.ClientInfo">
        select 
        	clientKey, clientVersion, clientPlatform, clientHash, isValid, date_format(modYmdt, '%Y-%m-%d %H:%i:%s') as modYmdt, modId
        from ClientInfo 
        limit #{from}, #{length}
    </select>
    
    <select id="size" resultType="int" parameterType="com.thirtygames.zero.common.model.meta.ClientInfo">
        select count(*)
        from ClientInfo
        <where>
        	1 = 1
	        <if test="model.rules != null">			
				<foreach collection="model.rules" item="rule" index="index" separator="" open="" close="">
		           	and ${rule.field}
		           	<choose>
		           		<when test="rule.op == 'eq'"> = </when>
		           		<when test="rule.op == 'le'"> &lt;= </when>
		           		<when test="rule.op == 'ge'"> &gt;= </when>
		           	</choose> 
		           	#{rule.data}
		       	</foreach>
	       	</if>
        </where>
    </select>
</mapper>